/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package macroscript.macroscript;

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Robot;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Joonas <>
 */
public class frmMain extends javax.swing.JFrame {

    /**
     * Creates new form frmMain
     */
    private boolean colorPickerActive = false;
    private ScriptMotor motor;

    public frmMain() {
        initComponents();
        this.colorPickerActive = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frmMain = new javax.swing.JFrame();
        scrpAsd = new javax.swing.JScrollPane();
        txtScript = new javax.swing.JTextArea();
        lblCurColor = new javax.swing.JLabel();
        lblMousePos = new javax.swing.JLabel();
        lblX = new javax.swing.JLabel();
        lblY = new javax.swing.JLabel();
        lblXpos = new javax.swing.JLabel();
        lblYpos = new javax.swing.JLabel();
        txtColor = new javax.swing.JTextField();
        lblColor = new javax.swing.JLabel();
        lblHexValue = new javax.swing.JLabel();
        lblStaticStatus = new javax.swing.JLabel();
        lblPickColor = new javax.swing.JLabel();
        mnuMenuBar = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuNew = new javax.swing.JMenuItem();
        mnuSave = new javax.swing.JMenuItem();
        mnuLoad = new javax.swing.JMenuItem();
        mnuExit = new javax.swing.JMenuItem();
        mnuScript = new javax.swing.JMenu();
        mnuErrCheck = new javax.swing.JMenuItem();
        mnuRunToMemory = new javax.swing.JMenuItem();
        mnuRun = new javax.swing.JMenuItem();

        javax.swing.GroupLayout frmMainLayout = new javax.swing.GroupLayout(frmMain.getContentPane());
        frmMain.getContentPane().setLayout(frmMainLayout);
        frmMainLayout.setHorizontalGroup(
            frmMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        frmMainLayout.setVerticalGroup(
            frmMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MacroScript");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        txtScript.setColumns(20);
        txtScript.setRows(5);
        scrpAsd.setViewportView(txtScript);

        lblCurColor.setText("Currently on color:");

        lblMousePos.setText("Mouse Position");

        lblX.setText("X:");

        lblY.setText("Y:");

        lblXpos.setText("1920");

        lblYpos.setText("1080");

        lblHexValue.setText("Hex Value of Color:");

        lblStaticStatus.setText("Status:");

        lblPickColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/micro-pipette2.fw.png"))); // NOI18N
        lblPickColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPickColorMouseClicked(evt);
            }
        });

        mnuFile.setText("File");

        mnuNew.setText("New Script");
        mnuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNewActionPerformed(evt);
            }
        });
        mnuFile.add(mnuNew);

        mnuSave.setText("Save Script");
        mnuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveActionPerformed(evt);
            }
        });
        mnuFile.add(mnuSave);

        mnuLoad.setText("Load Script");
        mnuLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLoadActionPerformed(evt);
            }
        });
        mnuFile.add(mnuLoad);

        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuExit);

        mnuMenuBar.add(mnuFile);

        mnuScript.setText("Script");

        mnuErrCheck.setText("Check For Errors");
        mnuScript.add(mnuErrCheck);

        mnuRunToMemory.setText("(Run To Memory)");
        mnuScript.add(mnuRunToMemory);

        mnuRun.setText("Run Script");
        mnuRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRunActionPerformed(evt);
            }
        });
        mnuScript.add(mnuRun);

        mnuMenuBar.add(mnuScript);

        setJMenuBar(mnuMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblStaticStatus)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(lblPickColor, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCurColor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblColor, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtColor, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHexValue))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblX)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblXpos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblY)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblYpos))
                            .addComponent(lblMousePos))
                        .addGap(42, 42, 42))))
            .addComponent(scrpAsd)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblColor, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lblCurColor))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblMousePos)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblY)
                                .addComponent(lblX)
                                .addComponent(lblXpos)
                                .addComponent(lblYpos)))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblHexValue)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblPickColor, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(scrpAsd, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStaticStatus)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNewActionPerformed
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to save your current script first?", "Save first?", dialogButton);
        if (dialogResult == JOptionPane.YES_OPTION) {
            saveAs();
        } else if (dialogResult == JOptionPane.NO_OPTION) {
            txtScript.setText("");
        }
    }//GEN-LAST:event_mnuNewActionPerformed

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuExitActionPerformed

    private void mnuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveActionPerformed
        saveAs();
    }//GEN-LAST:event_mnuSaveActionPerformed

    private void mnuLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLoadActionPerformed
        loadFile();
    }//GEN-LAST:event_mnuLoadActionPerformed

    public boolean getColorPickerActive() {
        return this.colorPickerActive;
    }

    public Color getColorUnderCursor() throws AWTException {
        Robot robot = new Robot();
        Color color = robot.getPixelColor(Integer.parseInt(lblXpos.getText()), Integer.parseInt(lblYpos.getText()));
        return color;
    }

    public String getColorHexUnderCursor() throws AWTException {
        Robot robot = new Robot();
        Color color = robot.getPixelColor(Integer.parseInt(lblXpos.getText()), Integer.parseInt(lblYpos.getText()));
        String hexValue = "#" + toHexString(color.getRed()) + toHexString(color.getGreen()) + toHexString(color.getBlue());
        return hexValue.toUpperCase();
    }

    public void setColors() throws AWTException {
        lblColor.setBackground(getColorUnderCursor());
        txtColor.setText(getColorHexUnderCursor());
    }

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
        // TODO add your handling code here:
        if (this.colorPickerActive == true) {
            try {
                setColors();
            } catch (AWTException ex) {
                Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.colorPickerActive = false;
        }
    }//GEN-LAST:event_formWindowDeactivated

    private void lblPickColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPickColorMouseClicked
        // TODO add your handling code here:
        this.colorPickerActive = true;
        lblColor.setOpaque(true);
    }//GEN-LAST:event_lblPickColorMouseClicked

    private void mnuRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRunActionPerformed
        try {
            // TODO add your handling code here:
            this.motor = new ScriptMotor(this.txtScript.getText());
        } catch (AWTException ex) {
            Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnuRunActionPerformed

    private String toHexString(final int input) {
        String out = Integer.toHexString(input);
        if (out.length() == 1) {
            out = "0" + out;
        }
        return out;
    }

    public void loadFile() {

        String txtData = txtScript.getText().trim();

        if (!txtData.equals("")) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to save your current script first?", "Save first?", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                saveAs();
            }
        }

        txtScript.setText("");

        FileNameExtensionFilter extensionFilter = new FileNameExtensionFilter("Great MacroScript file", "gms");
        final JFileChooser loadFileChooser = new JFileChooser();
        loadFileChooser.setApproveButtonText("Open");
        loadFileChooser.setFileFilter(extensionFilter);
        int actionDialog = loadFileChooser.showOpenDialog(this);
        if (actionDialog != JFileChooser.APPROVE_OPTION) {
            return;
        }

        // !! File fileName = new File(loadFileChooser.getSelectedFile() + ".gms");
        File file = loadFileChooser.getSelectedFile();

        BufferedReader inFile = null;
        boolean beginning = true;
        try {
            inFile = new BufferedReader(new FileReader(file));
            String str;
            while ((str = inFile.readLine()) != null) {
                if (beginning == false) {
                    txtScript.append("\n");
                }
                txtScript.append(str);
                beginning = false;
            }
        } catch (IOException e) {
        } finally {
            try {
                inFile.close();
            } catch (Exception ex) {
            }
        }
    }

    public void saveAs() {
        FileNameExtensionFilter extensionFilter = new FileNameExtensionFilter("Great MacroScript file", "gms");
        final JFileChooser saveAsFileChooser = new JFileChooser();
        saveAsFileChooser.setApproveButtonText("Save");
        saveAsFileChooser.setFileFilter(extensionFilter);
        int actionDialog = saveAsFileChooser.showOpenDialog(this);
        if (actionDialog != JFileChooser.APPROVE_OPTION) {
            return;
        }

        // !! File fileName = new File(SaveAs.getSelectedFile() + ".gms");
        File file = saveAsFileChooser.getSelectedFile();
        if (!file.getName().endsWith(".gms")) {
            file = new File(file.getAbsolutePath() + ".gms");
        }

        BufferedWriter outFile = null;
        try {
            outFile = new BufferedWriter(new FileWriter(file));

            txtScript.write(outFile);

        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (outFile != null) {
                try {
                    outFile.close();
                } catch (IOException e) {
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame frmMain;
    private javax.swing.JLabel lblColor;
    private javax.swing.JLabel lblCurColor;
    private javax.swing.JLabel lblHexValue;
    private javax.swing.JLabel lblMousePos;
    private javax.swing.JLabel lblPickColor;
    private javax.swing.JLabel lblStaticStatus;
    private javax.swing.JLabel lblX;
    public javax.swing.JLabel lblXpos;
    private javax.swing.JLabel lblY;
    public javax.swing.JLabel lblYpos;
    private javax.swing.JMenuItem mnuErrCheck;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuLoad;
    private javax.swing.JMenuBar mnuMenuBar;
    private javax.swing.JMenuItem mnuNew;
    private javax.swing.JMenuItem mnuRun;
    private javax.swing.JMenuItem mnuRunToMemory;
    private javax.swing.JMenuItem mnuSave;
    private javax.swing.JMenu mnuScript;
    private javax.swing.JScrollPane scrpAsd;
    private javax.swing.JTextField txtColor;
    private javax.swing.JTextArea txtScript;
    // End of variables declaration//GEN-END:variables
}
